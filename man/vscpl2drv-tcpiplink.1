.\"t
.\" Automatically generated by Pandoc 2.5
.\"
.TH "vscpl2drv\-tcpiplink.so" "1" "September 28, 2019" "VSCP Level II Logger Driver" ""
.hy
.SH NAME
.PP
vscpl2drv\-tcpiplink.so \- VSCP Level I Socketcan Driver
.SH SYNOPSIS
.PP
vscpl2drv\-tcpiplink.so
.SH DESCRIPTION
.PP
This driver interface SocketCAN, the official CAN API of the Linux
kernel, has been included in the kernel for a long time now.
Meanwhile, the official Linux repository has device drivers for all
major CAN chipsets used in various architectures and bus types.
SocketCAN offers the user a multiuser capable as well as hardware
independent socket\-based API for CAN based communication and
configuration.
Socketcan nowadays give access to the major CAN adapters that is
available on the market.
Note that as CAN only can handle Level I events only events up to class
< 1024 can be sent to this device.
Other events will be filtered out.
.SS Configuration
.PP
The \f[I]configuration string\f[R] is the first configuration data that
is read by the driver.
The driver will, after it is read and parsed, ask the server for driver
specific configuration data.
This data is fetched with the same pattern for all drivers.
Variables are formed by the driver name + some driver specific remote
variable name.
If this variable exist and contains data it will be used as
configuration for the driver regardless of the content of the
configuration string.
.SS Adding the driver to the VSCP daemon.
.PP
Add the driver to the vscpd configuration file (default location
\f[I]/etc/vscp/vscpd.conf\f[R]).
THis entry looks the same for all level II drivers.
.IP
.nf
\f[C]
<driver enable=\[dq]true\[dq] >
    <name>socketcan1</name>
    <path>/usr/lib/vscpl2drv_socketcan.so</path>
    <config>can</config>
    <guid>FF:FF:FF:FF:FF:FF:FF:FE:B8:27:EB:0A:11:02:00:00</guid>
</driver>
\f[R]
.fi
.IP \[bu] 2
\f[B]name\f[R] is the name of the driver.
Set a name that has some meaning for you.
.IP \[bu] 2
\f[B]path\f[R] points to the location where the driver is installed.
.IP \[bu] 2
\f[B]config\f[R] is the configuration string.
This string contains configuration entries separated by semicolon.
.IP \[bu] 2
\f[B]guid\f[R] is the GUID that should be used to referee to this driver
and devices handled by it.
If you set a GUID (and you should) the two least significant digits
should be set to zero.
If absent or not set the VSCP daemon will set a GUID for you.
.PP
In the configuration example above the driver will fetch configuration
data from the server from variables \f[I]socketcan1_interface\f[R],
\f[I]socketcan1_filter\f[R] and \f[I]socketcan1_mask\f[R]
.SS Configuration string
.IP
.nf
\f[C]
interface
\f[R]
.fi
.SS Interface
.PP
The parameter interface is the socketcan interface to use.
Typically this is can0, can0, can1\&... Defaults is vcan0, the first
virtual interface.
If the remote variable \f[B]prefix\f[R]_interface is available it will
be used instead of the configuration value.
\[lq]\f[B]prefix\f[R]\[rq] is the name given to the driver in
\f[I]vscpd.conf\f[R]
.SS Remote variables
.PP
The following configuration remote variables are defined
.PP
.TS
tab(@);
lw(32.5n) lw(10.0n) lw(27.5n).
T{
Remote variable name
T}@T{
Type
T}@T{
Description
T}
_
T{
**_interface**
T}@T{
string
T}@T{
The socketcan interface to use.
Typically this is \[lq]can0, can0, can1\&...\[rq] Defaults is vcan0 the
first virtual interface.
T}
T{
**_filter**
T}@T{
string
T}@T{
Standard VSCP filter in string form.
1,0x0000,0x0006,ff:ff:ff:ff:ff:ff:ff:01:00:00:00:00:00:00:00:00 as
priority,class,type,GUID Used to filter what events that is received
from the socketcan interface.
If not give all events are received.
T}
T{
**_mask**
T}@T{
string
T}@T{
Standard VSCP mask in string form.
1,0x0000,0x0006,ff:ff:ff:ff:ff:ff:ff:01:00:00:00:00:00:00:00:00 as
priority,class,type,GUID Used to filter what events that is received
from the socketcan interface.
If not give all events are received.
T}
T{
\f[B]config\f[R]
T}@T{
json
T}@T{
All of the above as a JSON object.
T}
.TE
.PP
   *   *   *   *   *
.PP
There are many Level I/II/III drivers available in VSCP & Friends
framework that can be used with both VSCP Works and the VSCP Daemon and
added to that Level II and Level III drivers that can be used with the
VSCP Daemon.
.PP
Level I drivers is documented
here (https://grodansparadis.gitbooks.io/the-vscp-daemon/level_i_drivers.html).
.PP
Level II drivers is documented
here (https://grodansparadis.gitbooks.io/the-vscp-daemon/level_ii_drivers.html)
.PP
Level III drivers is documented
here (https://grodansparadis.gitbooks.io/the-vscp-daemon/level_iii_drivers.html)
.SH SEE ALSO
.PP
\f[C]vscpd\f[R] (8).
\f[C]uvscpd\f[R] (8).
\f[C]vscpworks\f[R] (1).
\f[C]vscpcmd\f[R] (1).
\f[C]vscp\-makepassword\f[R] (1).
\f[C]vscphelperlib\f[R] (1).
.PP
The VSCP project homepage is here <https://www.vscp.org>.
.PP
The manual (https://grodansparadis.gitbooks.io/the-vscp-daemon) for
vscpd contains full documentation.
Other documentation can be found here
<https://grodansparadis.gitbooks.io>.
.PP
The vscpd source code may be downloaded from
<https://github.com/grodansparadis/vscp>.
Source code for other system components of VSCP & Friends are here
<https://github.com/grodansparadis>
.SH COPYRIGHT
.PP
Copyright 2000\-2019 \[oA]ke Hedman, Grodans Paradis AB \- MIT license.
.SH AUTHORS
\[oA]ke Hedmann, Grodans Paradis AB.
